<?php

require_once dirname(dirname(dirname(dirname(realpath(__FILE__))))) . '/bootstrap.php';

/**
 * Test class for NiceTime.
 * Generated by PHPUnit on 2012-12-13 at 22:05:30.
 */
class NiceTimeTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var NiceTime
     */
    protected $_object;

    protected function setUp()
    {
        $this->_object = new \Remluben\DateFormat\NiceTime();
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::format
     * @dataProvider provider
     */
    public function testFormat($expected, $parameter)
    {
        $this->assertEquals($expected, $this->_object->format($parameter));
    }

    public function provider()
    {
        $minute = 60;
        $hour = $minute * 60;
        $day = $hour * 24;
        $week = $day * 7;
        $month = $week * 4.35;
        $year = $month * 12;
        $decade = $year * 10;

        return array(
                // past time
                '1h ago'   => array('1 hour ago',
                        date('Y-m-d H:i:s', time() - $hour)),
                '2h ago'   => array('2 hours ago',
                        date('Y-m-d H:i:s', time() - 2 * $hour)),
                '1d ago'   => array('1 day ago',
                        date('Y-m-d H:i:s', time() - $day)),
                '24h ago'  => array('24 hours ago',
                        date('Y-m-d H:i:s', time() - $day + 10)),
                '2d ago'   => array('2 days ago',
                        date('Y-m-d H:i:s', time() - 2 * $day)),
                '1m ago'   => array('1 month ago',
                        date('Y-m-d H:i:s', time() - $month)),
                '2m ago'   => array('2 months ago',
                        date('Y-m-d H:i:s', time() - 2 * $month)),
                '2m 1w ago'   => array('2 months ago',
                        date('Y-m-d H:i:s', time() - 2 * $month - $week)),
                '1y ago'   => array('1 year ago',
                        date('Y-m-d H:i:s', time() - $year)),
                '10y ago'  => array('10 years ago',
                        date('Y-m-d H:i:s', time() - 10 * $year + 10)),
                '1dec ago' => array('1 decade ago',
                        date('Y-m-d H:i:s', time() - 10 * $year - 10)),
                // future time
                '1h from now'   => array('1 hour from now',
                        date('Y-m-d H:i:s', time() + $hour + 10)),
                '60min from now'=> array('60 minutes from now',
                        date('Y-m-d H:i:s', time() + $hour - 10)),
                // bad parameters
                'invalid date'  => array('Bad date', '0000-00-00'),
                'no date'       => array('No date provided', ''),
        );
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::getBadDateLabel
     */
    public function testGetBadDateLabel()
    {
        $this->assertEquals('Bad date', $this->_object->getBadDateLabel());
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::getNoDateLabel
     */
    public function testGetNoDateLabel()
    {
        $this->assertEquals('No date provided',
                $this->_object->getNoDateLabel());
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::getFutureTense
     */
    public function testGetFutureTense()
    {
        $this->assertEquals('%s from now', $this->_object->getFutureTense());
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::getPastTense
     */
    public function testGetPastTense()
    {
        $this->assertEquals('%s ago', $this->_object->getPastTense());
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::getPeriods
     */
    public function testGetPeriods()
    {
        $this->assertInternalType('array', $this->_object->getPeriods());
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::getPeriods
     */
    public function testGetPeriodsSize()
    {
        $this->assertCount(8, $this->_object->getPeriods());
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::setBadDateLabel
     */
    public function testSetBadDateLabel()
    {
        $this->_object->setBadDateLabel('');
        $this->assertEquals('',
                $this->readAttribute($this->_object, '_badDateLabel'));
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::setNoDateLabel
     */
    public function testSetNoDateLabel()
    {
        $this->_object->setNoDateLabel('');
        $this->assertEquals('',
                $this->readAttribute($this->_object, '_noDateLabel'));
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::setFutureTense
     */
    public function testSetFutureTense()
    {
        $this->_object->setFutureTense('');
        $this->assertEquals('',
                $this->readAttribute($this->_object, '_futureTense'));
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::setPastTense
     */
    public function testSetPastTense()
    {
        $this->_object->setPastTense('');
        $this->assertEquals('',
                $this->readAttribute($this->_object, '_pastTense'));
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::setPeriods
     */
    public function testSetPeriods()
    {
        $periods = array('s', 'm', 'h', 'd', 'w', 'm', 'y', 'd');
        $this->_object->setPeriods($periods);
        $this->assertEquals($periods, $this->readAttribute(
                $this->_object, '_periods'));
    }

    /**
     * @covers \Remluben\DateFormat\NiceTime::setPeriods
     * @expectedException \Remluben\DateFormat\InvalidArgumentException
     */
    public function testSetPeriodsException()
    {
        $this->_object->setPeriods('foo');
    }
}